Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS expression
Rule 2     expression -> term
Rule 3     term -> term factor
Rule 4     term -> factor
Rule 5     factor -> LPAREN expression RPAREN
Rule 6     factor -> factor STAR
Rule 7     factor -> EMPTY
Rule 8     factor -> CHAR

Terminals, with rules where they appear

CHAR                 : 8
EMPTY                : 7
LPAREN               : 5
PLUS                 : 1
RPAREN               : 5
STAR                 : 6
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 5 0
factor               : 3 4 6
term                 : 2 3

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . term
    (3) term -> . term factor
    (4) term -> . factor
    (5) factor -> . LPAREN expression RPAREN
    (6) factor -> . factor STAR
    (7) factor -> . EMPTY
    (8) factor -> . CHAR

    LPAREN          shift and go to state 3
    EMPTY           shift and go to state 2
    CHAR            shift and go to state 4

    term                           shift and go to state 1
    factor                         shift and go to state 5
    expression                     shift and go to state 6

state 1

    (2) expression -> term .
    (3) term -> term . factor
    (5) factor -> . LPAREN expression RPAREN
    (6) factor -> . factor STAR
    (7) factor -> . EMPTY
    (8) factor -> . CHAR

    RPAREN          reduce using rule 2 (expression -> term .)
    PLUS            reduce using rule 2 (expression -> term .)
    $end            reduce using rule 2 (expression -> term .)
    LPAREN          shift and go to state 3
    EMPTY           shift and go to state 2
    CHAR            shift and go to state 4

    factor                         shift and go to state 7

state 2

    (7) factor -> EMPTY .

    STAR            reduce using rule 7 (factor -> EMPTY .)
    LPAREN          reduce using rule 7 (factor -> EMPTY .)
    EMPTY           reduce using rule 7 (factor -> EMPTY .)
    CHAR            reduce using rule 7 (factor -> EMPTY .)
    RPAREN          reduce using rule 7 (factor -> EMPTY .)
    PLUS            reduce using rule 7 (factor -> EMPTY .)
    $end            reduce using rule 7 (factor -> EMPTY .)


state 3

    (5) factor -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS expression
    (2) expression -> . term
    (3) term -> . term factor
    (4) term -> . factor
    (5) factor -> . LPAREN expression RPAREN
    (6) factor -> . factor STAR
    (7) factor -> . EMPTY
    (8) factor -> . CHAR

    LPAREN          shift and go to state 3
    EMPTY           shift and go to state 2
    CHAR            shift and go to state 4

    term                           shift and go to state 1
    factor                         shift and go to state 5
    expression                     shift and go to state 8

state 4

    (8) factor -> CHAR .

    STAR            reduce using rule 8 (factor -> CHAR .)
    LPAREN          reduce using rule 8 (factor -> CHAR .)
    EMPTY           reduce using rule 8 (factor -> CHAR .)
    CHAR            reduce using rule 8 (factor -> CHAR .)
    RPAREN          reduce using rule 8 (factor -> CHAR .)
    PLUS            reduce using rule 8 (factor -> CHAR .)
    $end            reduce using rule 8 (factor -> CHAR .)


state 5

    (4) term -> factor .
    (6) factor -> factor . STAR

    LPAREN          reduce using rule 4 (term -> factor .)
    EMPTY           reduce using rule 4 (term -> factor .)
    CHAR            reduce using rule 4 (term -> factor .)
    PLUS            reduce using rule 4 (term -> factor .)
    $end            reduce using rule 4 (term -> factor .)
    RPAREN          reduce using rule 4 (term -> factor .)
    STAR            shift and go to state 9


state 6

    (0) S' -> expression .
    (1) expression -> expression . PLUS expression

    PLUS            shift and go to state 10


state 7

    (3) term -> term factor .
    (6) factor -> factor . STAR

    LPAREN          reduce using rule 3 (term -> term factor .)
    EMPTY           reduce using rule 3 (term -> term factor .)
    CHAR            reduce using rule 3 (term -> term factor .)
    PLUS            reduce using rule 3 (term -> term factor .)
    $end            reduce using rule 3 (term -> term factor .)
    RPAREN          reduce using rule 3 (term -> term factor .)
    STAR            shift and go to state 9


state 8

    (5) factor -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS expression

    RPAREN          shift and go to state 11
    PLUS            shift and go to state 10


state 9

    (6) factor -> factor STAR .

    STAR            reduce using rule 6 (factor -> factor STAR .)
    LPAREN          reduce using rule 6 (factor -> factor STAR .)
    EMPTY           reduce using rule 6 (factor -> factor STAR .)
    CHAR            reduce using rule 6 (factor -> factor STAR .)
    RPAREN          reduce using rule 6 (factor -> factor STAR .)
    PLUS            reduce using rule 6 (factor -> factor STAR .)
    $end            reduce using rule 6 (factor -> factor STAR .)


state 10

    (1) expression -> expression PLUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . term
    (3) term -> . term factor
    (4) term -> . factor
    (5) factor -> . LPAREN expression RPAREN
    (6) factor -> . factor STAR
    (7) factor -> . EMPTY
    (8) factor -> . CHAR

    LPAREN          shift and go to state 3
    EMPTY           shift and go to state 2
    CHAR            shift and go to state 4

    term                           shift and go to state 1
    factor                         shift and go to state 5
    expression                     shift and go to state 12

state 11

    (5) factor -> LPAREN expression RPAREN .

    STAR            reduce using rule 5 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 5 (factor -> LPAREN expression RPAREN .)
    EMPTY           reduce using rule 5 (factor -> LPAREN expression RPAREN .)
    CHAR            reduce using rule 5 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 5 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 5 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 5 (factor -> LPAREN expression RPAREN .)


state 12

    (1) expression -> expression PLUS expression .
    (1) expression -> expression . PLUS expression

    RPAREN          reduce using rule 1 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 1 (expression -> expression PLUS expression .)
    $end            reduce using rule 1 (expression -> expression PLUS expression .)

  ! PLUS            [ shift and go to state 10 ]

